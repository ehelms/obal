- block:
    - name: Generate downloaded_rpms dictionary for additional repositories
      set_fact:
        download_rpm_repos: "{{ dict([['name', 'downloaded_rpms'], ['url', inventory_dir + '/downloaded_rpms/' + dist]]) }}"
      when: downloaded_rpms_dists

    - name: Generate list of repositories
      set_fact:
        repoclosure_target_repos_all: "{{ repoclosure_target_repos[dist] | default([]) + ['downloaded_rpms'] }}"
      when: downloaded_rpms_dists

    - name: Generate list of repositories
      set_fact:
        repoclosure_target_repos_all: "{{ repoclosure_target_repos[dist] }}"
      when: not downloaded_rpms_dists

    - name: Set additional_repos
      set_fact:
        additional_repos: "{{ repoclosure_additional_repos + [download_rpm_repos] }}"
      when: download_rpm_repos is defined

    - name: Set additional_repos
      set_fact:
        additional_repos: "{{ repoclosure_additional_repos }}"
      when: download_rpm_repos is not defined

    - name: Set config filename for repoclosure
      set_fact:
        config_filename: "{{ repoclosure_config | basename }}"

    - name: Create temp directory
      tempfile:
        state: directory
        suffix: repoclosure
      register: temp_directory

    - name: Copy repoclosure config to temp directory
      copy:
        src: "{{ inventory_dir }}/{{ repoclosure_config }}"
        dest: "{{ temp_directory.path }}/{{ config_filename }}"
        remote_src: true
        mode: '0640'

    - name: Replace cachedir with temp directory
      replace:
        path: "{{ temp_directory.path }}/{{ config_filename }}"
        regexp: "^cachedir.*"
        replace: "cachedir={{ temp_directory.path }}"

    - name: 'Run repoclosure for {{ dist }}'
      repoclosure:
        config: "{{ temp_directory.path }}/{{ config_filename }}"
        check: "{{ repoclosure_target_repos_all }}"
        additional_repos: "{{ additional_repos }}"
        lookaside: "{{ repoclosure_lookaside_repos[dist] }}"
      register: output

    - debug:
        msg: "{{ output.output }}"
  always:
    - name: Clean up temporary directory
      file:
        state: absent
        path: "{{ temp_directory.path }}"
